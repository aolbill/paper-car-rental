rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read and write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow users to create their profile on first registration
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own profile (but not role field)
      allow update: if request.auth != null && request.auth.uid == userId &&
        (!('role' in request.resource.data) ||
         request.resource.data.role == resource.data.role);

      // Allow admin to read all users and update roles
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // User activity logs - users can read their own logs, write is allowed for logging
    match /userActivityLogs/{logId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Cars collection - PUBLIC READ ACCESS for browsing, write for admins only
    match /cars/{carId} {
      // Allow anyone to read cars (public browsing)
      allow read: if true;
      
      // Only admins can write/create cars
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Bookings collection - users can read/write their own bookings, admins can access all
    match /bookings/{bookingId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }
    
    // Payments collection - users can read/write their own payments, admins can access all
    match /payments/{paymentId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }
    
    // Locations collection - PUBLIC READ ACCESS, write for admins only
    match /locations/{locationId} {
      // Allow anyone to read locations (for pickup/dropoff selection)
      allow read: if true;
      
      // Only admins can write locations
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Messages collection - users can read/write messages in conversations they participate in
    match /messages/{messageId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Conversations collection - users can read/write conversations they participate in
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Notifications collection - users can read their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create, update: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // FCM tokens collection - users can manage their own tokens
    match /fcm_tokens/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
